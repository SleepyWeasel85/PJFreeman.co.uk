#!/usr/bin/env php
<?php
/**
 * Shell script interface for launching the built-in webserver.
 *
 * Usage: server [-a|--approot[="..."]] [-p|--port[="..."]]
 *
 * PHP.Gt (http://php.gt)
 * @copyright Copyright Ⓒ 2015 Bright Flair Ltd. (http://brightflair.com)
 * @license http://www.opensource.org/licenses/mit-license.php MIT
 */
use Gt\Cli\Server;
use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\ArgvInput;

// PHP.Gt should always be loaded as a Composer dependency. The vendor directory
// will be in the project's root directory — not PHP.Gt's root directory.
// We first need to find the root directory by working up the directory tree
// until the vendor directory is found.
$vendorDirectory = null;
while(true) {
	$cwd = getcwd();
	if(is_dir("$cwd/vendor")) {
		$vendorDirectory = "$cwd/vendor";
		break;
	}
	chdir("..");

	if(getcwd() === $cwd) {
		// We have reached the root directory of the filesystem without finding
		// the vendor directory.
		echo "No vendor directory found.\n"
			. "Have you performed a composer install?\n\n"
			. "See http://www.php.gt/docs/installation for more information.\n";
		exit(1);
	}
}

$vendorAutoLoadFile = realpath("$vendorDirectory/autoload.php");
if(!file_exists($vendorAutoLoadFile)) {
	echo "No Composer autoloader script found.\n"
		. "Have you performed a composer install?\n\n"
		. "See http://www.php.gt/docs/installation for more information.\n";
	exit(1);
}
require($vendorAutoLoadFile);

$defaults = [
	"approot" => $cwd,
	"port" => 8080,
	"xdebug" => "none",
];

$definition = new InputDefinition([
	new InputArgument("approot", InputArgument::OPTIONAL),
	new InputOption("approot", "a", InputOption::VALUE_OPTIONAL,
		"Application root directory", $defaults["approot"]),
	new InputOption("port", "p", InputOption::VALUE_OPTIONAL,
		"Port to bind webserver to", $defaults["port"]),
	new InputOption("xdebug", "x", InputOption::VALUE_OPTIONAL,
		"IDEKey to set XDebug to", $defaults["xdebug"]),
]);

try {
	$input = new ArgvInput($argv, $definition);
	$approot = $input->getOption("approot");
	$overrideApproot = $input->getArgument("approot");
	if(!is_null($overrideApproot)) {
		$approot = "$approot/$overrideApproot";
	}
	
	$xdebug = $input->getOption("xdebug");
	ini_set("xdebug.idekey", $xdebug);
	
	new Server($input);
	exit(0);
}
catch(Exception $e) {
	echo "\nserver shell script usage:\n";
	echo $definition->getSynopsis();
	echo "\n\n";
	echo strip_tags($definition->asText());
	echo "\n";
	exit(1);
}
